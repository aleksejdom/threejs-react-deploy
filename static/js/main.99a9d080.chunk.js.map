{"version":3,"sources":["components/Orbit.jsx","components/Skybox.jsx","components/Light.jsx","components/Floor.jsx","state.js","components/ColorPicker.jsx","components/DragControl.jsx","components/Model.jsx","components/BoundingBox.jsx","components/Cars.jsx","components/CameraControls.jsx","components/CameraButtons.jsx","components/Effects.jsx","App.js","reportWebVitals.js","index.js"],"names":["extend","OrbitControls","Orbit","useThree","camera","gl","autoRotate","enableZoom","enablePan","minPolarAngle","Math","PI","maxPolarAngle","attach","args","domElement","Skybox","texture","useLoader","THREE","formatted","useMemo","image","height","fromEquirectangularTexture","object","Light","intensity","position","castShadow","Floor","props","useBox","ref","receiveShadow","transparent","opacity","state","activeMesh","activeMeshName","cameraPos","target","shouldUpdate","ColorPicker","handleClick","e","material","color","style","background","zIndex","left","right","margin","width","display","top","cursor","onClick","DragControls","Model","model","GLTFLoader","path","scene","traverse","child","isMesh","side","scale","BoundingBox","offset","dims","visible","children","mass","api","wireframe","Cars","fallback","Array","fill","CameraControls","useFrame","name","getObjectByName","lerp","orbitControls","update","clone","sub","length","bottom","textAlign","fontSize","fontWeight","CameraButtons","sets","num","set","Effects","focusDistance","focalLength","bokehScale","luminanceThreshold","luminanceSmoothing","App","powerPreference","antialias","stencil","depth","shadowMap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99a9d080.chunk.js","sourcesContent":["import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { extend, useThree } from 'react-three-fiber'\r\n\r\n//Components added this way can then be referenced in the scene\r\nextend({OrbitControls})\r\n\r\nconst Orbit = () => {\r\n    //This hook gives you access to the state model which contains the default renderer, the scene, your camera, and so on\r\n    const { camera, gl } = useThree()\r\n    return(\r\n        <orbitControls \r\n            /* attach sorgt für die Zugänglichkeit des Elements von der Scene aus */\r\n            autoRotate enableZoom={false} \r\n            enablePan={false} \r\n            minPolarAngle={Math.PI / 2.8} \r\n            maxPolarAngle={Math.PI / 2.8}\r\n            attach=\"orbitControls\"\r\n            args={[camera, gl.domElement]} \r\n        />\r\n    )\r\n}\r\n  \r\nexport default Orbit","import * as THREE from 'three';\r\nimport { useLoader, useThree} from 'react-three-fiber'\r\nimport { useMemo } from 'react'\r\n\r\nconst Skybox = () => {\r\n\r\n    const texture = useLoader(\r\n      THREE.TextureLoader, \r\n      'https://aleksejdom.github.io/threejs-react-deploy/sky.jpg'\r\n    )\r\n  \r\n    const { gl } = useThree();\r\n    const formatted = useMemo(() => \r\n        new THREE.WebGLCubeRenderTarget(\r\n            texture.image.height\r\n        ).fromEquirectangularTexture(gl, texture), []\r\n    )\r\n    \r\n    return(\r\n      <primitive \r\n        attach='background' \r\n        object={formatted} \r\n      />\r\n    )\r\n  }\r\n\r\n  export default Skybox;","const Light = () => {\r\n    return (\r\n      <>\r\n        <ambientLight intensity={0.2} />\r\n        <directionalLight\r\n          shadow-mapSize-height={2**10}\r\n          shadow-mapSize-width={2**10}\r\n          shadow-radius={15} \r\n          position={[6,3,0]}\r\n          intensity={2}\r\n          castShadow\r\n        />\r\n        <pointLight \r\n          position={[0,4,0]}\r\n          intensity={2}\r\n        />\r\n      </>\r\n    )\r\n}\r\n\r\nexport default Light;","import { useBox } from 'use-cannon'\r\n\r\nconst Floor = props => {\r\n  const [ref, api] = useBox(()=> ({args:[10,0.2,10], ...props}))\r\n    return(\r\n      <mesh ref={ref} {...props} receiveShadow>\r\n        <boxBufferGeometry args={[100,0.2,100]}/>\r\n        <meshPhongMaterial \r\n          transparent\r\n          opacity={0.2}\r\n        />\r\n      </mesh>\r\n    )\r\n  }\r\n\r\n  export default Floor;","import * as THREE from 'three'\r\n\r\n//audi: \"Object_21\", \"Object_20\"\r\n//tesla: \"\"object005_bod_0\"\"\r\nconst state = {\r\n    activeMesh: {},\r\n    activeMeshName: 'Object_20',\r\n    cameraPos: new THREE.Vector3(3,5,3),\r\n    target: new THREE.Vector3(2,1,0),\r\n    shouldUpdate: true\r\n}\r\n\r\nexport default state;","import * as THREE from 'three';\r\nimport state from '../state'\r\n\r\nconst ColorPicker = () => {\r\n    const handleClick = e => {\r\n        if (!state.activeMesh) return;\r\n        state.activeMesh.material.color = new THREE.Color(e.target.style.background)\r\n      }\r\n    return(\r\n        <div style={{\r\n            position: 'absolute', \r\n            zIndex:1,\r\n            left: 0,\r\n            right: 0,\r\n            margin: 'auto',\r\n            width: 'fit-content',\r\n            display: 'flex',\r\n            top: '20px',\r\n            cursor: 'pointer'\r\n        }}\r\n        >\r\n            <div onClick={handleClick}\r\n            style={{\r\n                background: 'black',\r\n                height: 50,\r\n                width: 50\r\n            }}\r\n            >\r\n            </div>\r\n            <div onClick={handleClick}\r\n            style={{\r\n                background: 'yellow',\r\n                height: 50,\r\n                width: 50\r\n            }}\r\n            >\r\n            </div>\r\n            <div onClick={handleClick}\r\n            style={{\r\n                background: 'red',\r\n                height: 50,\r\n                width: 50\r\n            }}\r\n            >\r\n            </div>\r\n            <div onClick={handleClick}\r\n            style={{\r\n                background: '#1B3D81',\r\n                height: 50,\r\n                width: 50\r\n            }}\r\n            >\r\n            </div>\r\n            <div onClick={handleClick}\r\n            style={{\r\n                background: '#E4C27E ',\r\n                height: 50,\r\n                width: 50\r\n            }}\r\n            ></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ColorPicker;","import {DragControls} from 'three/examples/jsm/controls/DragControls.js'\r\nimport { useRef, useEffect, useState } from 'react'\r\nimport { extend, useThree } from 'react-three-fiber'\r\n\r\n//Components added this way can then be referenced in the scene\r\nextend({ DragControls })\r\n\r\nconst DragControl = props => {\r\n    const [children, setChildren] = useState([])\r\n    const groupRef = useRef()\r\n    const controlsRef = useRef()\r\n    const { camera, gl, scene } = useThree();\r\n\r\n    useEffect(() => {\r\n        setChildren(groupRef.current.children)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        controlsRef.current.addEventListener(\r\n            'hoveron', \r\n            e => scene.orbitControls.enabled = false\r\n        )\r\n        controlsRef.current.addEventListener(\r\n            'hoveroff', \r\n            e => scene.orbitControls.enabled = true\r\n        )\r\n        controlsRef.current.addEventListener(\r\n            'dragstart', \r\n            e => {\r\n                e.object.api?.mass.set(0)\r\n                console.log(e.object)\r\n            } \r\n            \r\n        )\r\n        controlsRef.current.addEventListener(\r\n            'dragend', \r\n            e => e.object.api?.mass.set(1)\r\n        )\r\n        controlsRef.current.addEventListener(\r\n            'drag', \r\n            e => {\r\n                e.object.api?.position.copy(e.object.position)\r\n                e.object.api?.velocity.set(0,0,0)\r\n            } \r\n        )\r\n    //listen for children\r\n    }, [children])\r\n\r\n    return(\r\n        //to have the acces to the 3d objects\r\n       <group ref={groupRef}>\r\n           {/* dragControls is from jsm EventDispatcher*/}\r\n           <dragControls \r\n           transformGroup={props.transformGroup}\r\n           ref={controlsRef}\r\n           args={\r\n               [children, camera, gl.domElement]\r\n           }/>\r\n           {props.children}\r\n       </group>\r\n    )\r\n}\r\n\r\nexport default DragControl;","import { useLoader } from 'react-three-fiber';\r\nimport { \r\n    GLTFLoader \r\n} from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport * as THREE from 'three'\r\n\r\nconst Model = props => {\r\n\r\n    const model = useLoader(\r\n        GLTFLoader,\r\n        'https://aleksejdom.github.io/threejs-react-deploy/' + props.path\r\n    )\r\n\r\n    model.scene.traverse(child => {\r\n        if(child.isMesh) {\r\n            child.castShadow = true\r\n            child.receiveShadow = true\r\n            child.material.side = THREE.FrontSide\r\n        }\r\n    })\r\n\r\n    return(\r\n        <primitive \r\n            object={model.scene}\r\n            scale={props.scale}\r\n           /*  position={props.position} */\r\n        />\r\n        \r\n    )\r\n}\r\n\r\nexport default Model;","import { applyProps } from 'react-three-fiber';\r\nimport { useBox } from 'use-cannon'\r\n\r\nconst BoundingBox = ({\r\n    position = [0,0,0],\r\n    offset = [0,0,0],\r\n    dims = [1,1,1],\r\n    visible = false,\r\n    children\r\n}) => {\r\n    const [ref, api] = useBox(()=>({\r\n        mass:1, \r\n        args: dims,\r\n        position: position\r\n    }))\r\n    return(\r\n        <group ref={ref} api={api}>\r\n            <mesh scale={dims} visible={visible}>\r\n                <boxBufferGeometry />\r\n                <meshPhysicalMaterial wireframe/>\r\n            </mesh>\r\n            <group position={offset}>\r\n                {children}\r\n            </group>\r\n        </group>\r\n    )\r\n}\r\n\r\nexport default BoundingBox;","import { Suspense } from 'react'\r\nimport DragControl from './DragControl';\r\nimport Model from './Model';\r\nimport BoundingBox from './BoundingBox';\r\n\r\nconst Cars = () => {\r\n    \r\n    return (\r\n        <Suspense fallback={null}>\r\n            {/* <DragControl transformGroup>  */}\r\n              {/* Async Section */}\r\n              <BoundingBox \r\n                /* visible */\r\n                position={[2,2,0]}\r\n                dims={[2,1.3,4]}\r\n                offset={[0,0,0.3]}\r\n              >\r\n              <Model \r\n                path='/audi/scene.gltf' \r\n                scale={new Array(3).fill(0.2)}\r\n               /*  position={[2,0.72,0]} */\r\n              />\r\n              </BoundingBox>\r\n           {/*  </DragControl> */}\r\n\r\n           {/*  <DragControl transformGroup>  */}\r\n              <BoundingBox \r\n                /* visible */\r\n                position={[-2,1,0]}\r\n                dims={[2,1,4]}\r\n                offset={[0,-0.4,0]}\r\n              >\r\n              <Model \r\n                  path='/tesla/scene.gltf' \r\n                  scale={new Array(3).fill(0.007)}\r\n                 /*  position={[-2,0.23,0]} */\r\n              />\r\n              </BoundingBox>\r\n            {/* </DragControl> */}\r\n        </Suspense>\r\n    )\r\n}\r\n\r\nexport default Cars;","import { useFrame } from 'react-three-fiber'\r\nimport state from '../state'\r\nimport * as THREE from 'three'\r\n\r\nconst CameraControls = ({ }) => {\r\n    useFrame(({ camera, scene }) => {\r\n        if (state.activeMesh.name !== state.activeMeshName) {\r\n            state.activeMesh = scene.getObjectByName(\r\n                state.activeMeshName\r\n            ) || {}\r\n        }\r\n        if(state.shouldUpdate) {\r\n            camera.position.lerp(state.cameraPos,0.1)\r\n            scene.orbitControls.target.lerp(state.target, 0.1)\r\n            //Must call after any chanes to the camera transform\r\n            scene.orbitControls.update()\r\n            const diff = \r\n                camera.position.clone()\r\n                .sub(state.cameraPos).length()\r\n            if(diff < 0.1) state.shouldUpdate = false\r\n        }\r\n       \r\n    })\r\n\r\n    return(\r\n        null\r\n    )\r\n}\r\n\r\nexport default CameraControls;","import state from '../state'\r\n\r\nconst style = {\r\n    zIndex: 1,\r\n    position: 'absolute',\r\n    bottom: '10vh',\r\n    textAlign: 'center',\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    opacity: 0.9,\r\n    cursor: 'pointer'\r\n}\r\n\r\nconst CameraButtons = ({}) => {\r\n\r\n    const sets = {\r\n        //audi\r\n        1: {\r\n            cameraPos: [3,5,3],\r\n            target: [2,1,0],\r\n            name: 'Object_20'\r\n        },\r\n        //tesla\r\n        2: {\r\n            cameraPos: [-3,5,3],\r\n            target: [-2,1,0],\r\n            name: 'object005_bod_0'\r\n        }\r\n    }\r\n    const handleClick = num => {\r\n        state.cameraPos.set(...sets[num].cameraPos)\r\n        state.target.set(...sets[num].target)\r\n        state.activeMeshName = sets[num].name\r\n        state.shouldUpdate = true\r\n    }\r\n\r\n    return(\r\n        //Fragment\r\n        <> \r\n            <button\r\n                onClick={ e => handleClick(2) }\r\n                style={{\r\n                    ...style,\r\n                    left: '20vw',\r\n                  \r\n                }}\r\n            >\r\n                {'PREV'}\r\n            </button>\r\n            <button\r\n                onClick={ e => handleClick(1) }\r\n                style={{\r\n                    ...style,\r\n                    right: '20vw',\r\n                 \r\n                }}\r\n            >\r\n                {'NEXT'}\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CameraButtons;","import { \r\n    EffectComposer,\r\n    DepthOfField,\r\n    Bloom\r\n  } from 'react-postprocessing'\r\n\r\n  \r\nconst Effects = () => {\r\n    return(\r\n        <EffectComposer>\r\n        <DepthOfField \r\n          focusDistance={0} \r\n          focalLength={0.02} \r\n          bokehScale={2} \r\n          height={480} \r\n        />\r\n         <Bloom luminanceThreshold={0.7} luminanceSmoothing={0.9} height={300} /> \r\n      </EffectComposer>\r\n    )\r\n}\r\n\r\nexport default Effects;","\nimport './App.css';\nimport { Canvas } from 'react-three-fiber'\nimport { Suspense } from 'react'\nimport { Physics } from 'use-cannon'\n\nimport Orbit from './components/Orbit';\nimport Skybox from './components/Skybox';\nimport Light from './components/Light';\nimport Floor from './components/Floor';\n/* import Box from './components/Box'; */\nimport ColorPicker from './components/ColorPicker';\nimport Cars from './components/Cars';\nimport CameraControls from './components/CameraControls';\nimport CameraButtons from './components/CameraButtons';\nimport Effects from './components/Effects';\n\n\nfunction App() {  \n\n  return (\n    <div style={{height: '100vh', width: '100vw'}}>\n      <ColorPicker />\n      <CameraButtons />\n      <Canvas \n        gl={{\n          powerPreference: \"high-performance\",\n          antialias: false,\n          stencil: false,\n          depth: false\n        }}\n        shadowMap \n        style={{background: '#000000'}}\n        camera={{position: [1,0,1]}} \n      >\n        <CameraControls />\n        <Orbit />\n       {/*  <axesHelper args={[5]} />  */}\n        \n        <Light />\n        <Physics>\n          <Cars />\n          <Floor position={[0, 0, 0]} />\n        </Physics> \n       \n        <Suspense fallback={null}>\n          <Skybox />\n        </Suspense>\n       <Effects />\n      </Canvas>\n    </div>\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}